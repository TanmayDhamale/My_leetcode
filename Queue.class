// Source code is decompiled from a .class file using FernFlower decompiler.
class Queue {
   private int[] arr;
   private int front;
   private int rear;
   private int capacity;
   private int size;

   public Queue(int var1) {
      this.capacity = var1;
      this.arr = new int[var1];
      this.front = 0;
      this.rear = -1;
      this.size = 0;
   }

   public void enqueue(int var1) {
      if (this.isFull()) {
         System.out.println("Queue Overflow! Cannot enqueue " + var1);
      } else {
         this.rear = (this.rear + 1) % this.capacity;
         this.arr[this.rear] = var1;
         ++this.size;
         System.out.println("Enqueued: " + var1);
      }
   }

   public int dequeue() {
      if (this.isEmpty()) {
         System.out.println("Queue Underflow! No element to dequeue.");
         return -1;
      } else {
         int var1 = this.arr[this.front];
         this.front = (this.front + 1) % this.capacity;
         --this.size;
         return var1;
      }
   }

   public int peek() {
      if (this.isEmpty()) {
         System.out.println("Queue is empty!");
         return -1;
      } else {
         return this.arr[this.front];
      }
   }

   public boolean isEmpty() {
      return this.size == 0;
   }

   public boolean isFull() {
      return this.size == this.capacity;
   }

   public void printQueue() {
      if (this.isEmpty()) {
         System.out.println("Queue is empty!");
      } else {
         System.out.print("Queue: ");

         for(int var1 = 0; var1 < this.size; ++var1) {
            int var10001 = this.arr[(this.front + var1) % this.capacity];
            System.out.print("" + var10001 + " ");
         }

         System.out.println();
      }
   }

   public static void main(String[] var0) {
      Queue var1 = new Queue(5);
      var1.enqueue(10);
      var1.enqueue(20);
      var1.enqueue(30);
      var1.printQueue();
      System.out.println("Front Element (Peek): " + var1.peek());
      System.out.println("Dequeued Element: " + var1.dequeue());
      var1.printQueue();
      var1.enqueue(40);
      var1.enqueue(50);
      var1.enqueue(60);
      var1.printQueue();
      var1.dequeue();
      var1.dequeue();
      var1.dequeue();
      var1.dequeue();
      var1.dequeue();
   }
}

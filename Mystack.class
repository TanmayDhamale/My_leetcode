// Source code is decompiled from a .class file using FernFlower decompiler.
class Stack {
   private int[] arr;
   private int top;
   private int capacity;

   public Stack(int var1) {
      this.arr = new int[var1];
      this.capacity = var1;
      this.top = -1;
   }

   public void push(int var1) {
      if (this.isFull()) {
         System.out.println("Stack Overflow! Cannot push " + var1);
      } else {
         this.arr[++this.top] = var1;
         System.out.println("Pushed: " + var1);
      }
   }

   public int pop() {
      if (this.isEmpty()) {
         System.out.println("Stack Underflow! No element to pop.");
         return -1;
      } else {
         return this.arr[this.top--];
      }
   }

   public int peek() {
      if (this.isEmpty()) {
         System.out.println("Stack is empty!");
         return -1;
      } else {
         return this.arr[this.top];
      }
   }

   public boolean isEmpty() {
      return this.top == -1;
   }

   public boolean isFull() {
      return this.top == this.capacity - 1;
   }

   public void printStack() {
      if (this.isEmpty()) {
         System.out.println("Stack is empty!");
      } else {
         System.out.print("Stack: ");

         for(int var1 = 0; var1 <= this.top; ++var1) {
            int var10001 = this.arr[var1];
            System.out.print("" + var10001 + " ");
         }

         System.out.println();
      }
   }

   public static void main(String[] var0) {
      Stack var1 = new Stack(5);
      var1.push(10);
      var1.push(20);
      var1.push(30);
      var1.printStack();
      System.out.println("Top Element (Peek): " + var1.peek());
      System.out.println("Popped Element: " + var1.pop());
      var1.printStack();
      System.out.println("Popped Element: " + var1.pop());
      System.out.println("Popped Element: " + var1.pop());
      var1.pop();
   }
}
